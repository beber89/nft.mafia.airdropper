const { expect } = require("chai");
const { BN } = require('@openzeppelin/test-helpers');

let contracts =  {
        AirDropper:  artifacts.require('AirDropper'),
        MockToken: artifacts.require('MafiaArtMock'),
}

describe("AirDropper", function() {
  before(async function () {
      this.accounts = await web3.eth.getAccounts();

      this.owner = this.accounts[0];
      this.alice = this.accounts[1];
      this.bob = this.accounts[2];
      this.carol = this.accounts[3];
      this.notOwner = this.accounts[4];
      this.testAddr = this.accounts[5];
  });

  beforeEach(async function () {
      this.mockObsToken = await contracts.MockToken.new("ObsMafia", "OBS");
      this.mockNewToken = await contracts.MockToken.new("NewMafia", "NEW");
      this.airDropper = await contracts.AirDropper.new(this.mockObsToken.address, this.mockNewToken.address);

      await this.mockObsToken.allowMinter(this.owner);
      await this.mockNewToken.allowMinter(this.owner);
      await this.mockNewToken.allowMinter(this.airDropper.address);
  });

  // TODO: test setters

  it.only("recallTokens - 20 consecutive obselete mints", async function() {
    let mintables = [...Array(20).keys()].map(x => x+1);
    for (let i=0; i < mintables.length; i++) {
      await this.mockObsToken.mint(this.bob, i);
    }
     await this.airDropper.airdrop(mintables);
     expect(await this.mockNewToken.totalSupply()).to.be.bignumber.equal(new BN(20));
  });

  it("recallTokens - 50 consecutive obselete mints, finished on three runs", async function() {
    let mintables = [...Array(50).keys()].map(x => x+1);
    for (let i=0; i < mintables.length; i++) {
      await this.mockObsToken.mint(this.bob, i);
    }
     await this.airDropper.airdrop(mintables);
     expect(await this.mockNewToken.totalSupply()).to.be.bignumber.equal(new BN(50));
  });
});